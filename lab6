#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define MAX_CARDS 52
#define MAX_CHILDREN 4

// Function to compare cards (for sorting and gameplay)
int compare_cards(const void *a, const void *b) {
    // Implement card comparison logic
    return 0;
}

int main(int argc, char *argv[]) {
    int n_children = atoi(argv[1]); // Number of children
    int pipes[MAX_CHILDREN][2];     // Pipes for parent-to-child communication
    int pipes_back[MAX_CHILDREN][2];// Pipes for child-to-parent communication
    int i, j;
    char cards[MAX_CARDS][3];       // Array to store cards
    int card_count = 0;

    // Read cards from input
    while (scanf("%s", cards[card_count]) != EOF) {
        // Check for duplicates
        int is_duplicate = 0;
        for (i = 0; i < card_count; i++) {
            if (strcmp(cards[i], cards[card_count]) == 0) {
                is_duplicate = 1;
                break;
            }
        }
        if (is_duplicate) {
            printf("Parent: duplicated card %s is discarded\n", cards[card_count]);
        } else {
            card_count++;
        }
    }

    // Create pipes and fork children
    for (i = 0; i < n_children; i++) {
        pipe(pipes[i]);      // Parent-to-child pipe
        pipe(pipes_back[i]); // Child-to-parent pipe

        if (fork() == 0) {
            // Child process
            close(pipes[i][1]); // Close write end of parent-to-child pipe
            close(pipes_back[i][0]); // Close read end of child-to-parent pipe

            // Receive cards from parent
            char child_cards[MAX_CARDS][3];
            int n_cards = 0;
            while (read(pipes[i][0], child_cards[n_cards], 3) > 0) {
                n_cards++;
            }

            // Sort cards
            qsort(child_cards, n_cards, 3, compare_cards);

            // Gameplay logic
            // (Send card plays, passes, or completion messages to parent via pipes_back[i][1])

            close(pipes[i][0]);
            close(pipes_back[i][1]);
            exit(0);
        } else {
            // Parent process
            close(pipes[i][0]); // Close read end of parent-to-child pipe
            close(pipes_back[i][1]); // Close write end of child-to-parent pipe
        }
    }

    // Distribute cards to children
    for (i = 0; i < card_count; i++) {
        write(pipes[i % n_children][1], cards[i], 3);
    }

    // Game logic
    // (Relay card plays between children, enforce rules, determine winner/loser)

    // Wait for all children to complete
    for (i = 0; i < n_children; i++) {
        wait(NULL);
    }

    return 0;
}
